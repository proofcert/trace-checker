% for format: wiki 

%true focused
check(_,_,foc(true)).
check(_,_,unfk([true|_])).

%false
check(Cert,SL,unfk([false|Gamma])) :- check(Cert,SL,unfk(Gamma)).

%init... P should be a positive atom
check(_,store(SL,NL),foc(x(P))) :-    member(not(x(P)),NL).

%release N is a negative literal or formula
check(certLeft(DL),SL,foc(Formula)) :- 
    isNegative(Formula),
    check(certLeft(DL),SL,unfk([Formula])).

%cut rule
check(certRight([],chains([chain(StoreDex, DL, Cut)|RestChains])),  SL,  unfk([])) :-  %called when nothing unfk, all storable formulas have been stored
    negate(Cut,NCut),   %this ensures cut rule fails on left branch, as an integer in DL can't be negated. however it will not match at all now if I wrap the Chainlist in chains(...)
    check(certLeft([-1|DL]),SL,unfk([Cut])), 
    check(certRight([StoreDex],chains(RestChains)),SL,unfk([NCut])). 

%decide. P is positive atom or formula
check(certLeft(DL),store(SL,NL),unfk([])) :- %only can decide on -1 once each branch. 
    select(I,DL,DL1),
    select((I,F),SL,SL1), isPositive(F), 
    check(certLeft(DL1),store(SL1,NL),foc(F)).

%store.. works if C is either a positive formula or negative atom. this is negative atom case
check(certRight([I|Rest],Chains),store(SL,NL),unfk([not(x(P))|Gamma])) :-
    check(certRight(Rest,Chains),store(SL,[not(x(P))|NL]),unfk(Gamma)). 
    
%this is positive formula case
check(certRight([I|Rest],Chains), store(SL,NL), unfk([Formula|Gamma])) :-
    isPositive(Formula), 
    check(certRight(Rest,Chains), store([(I,Formula)|SL],NL), unfk(Gamma)).
    
% store but case where formulas should be stored at -1
check(certLeft(DL),store(SL,NL),unfk([not(x(P))|Gamma])) :-
    check(certLeft(DL),store(SL,[not(x(P))|NL]),  unfk(Gamma)). 
check(certLeft(DL),store(SL,NL),unfk([Formula|Gamma])) :-
    isPositive(Formula), 
    check(certLeft(DL),store([(-1,Formula)|SL],NL),   unfk(Gamma)).
    
    
    
%and focused
check(certLeft(DL),SL,foc(and(A,B))) :-
    check(certLeft(DL),SL,foc(A)), check(certLeft(DL),SL,foc(B)).
        
    
%and unfocused
%check(certLeft(DL),SL,unfk([and(A,B)|Gamma])) :- 
%    check(certLeft(DL),SL,unfk([A|Gamma])),
%    check(certLeft(DL),SL,unfk([B|Gamma])).
    
%or focused
%check(Cert,SL,foc(or(A,B))) :- check(DL,SL,foc(A)).
%check(certLeft(DL),SL,foc(or(A,B))) :- check(DL,SL,foc(B)).
    
%or unfocused
check(Cert,SL,unfk([or(A,B)|Gamma])) :- %here cert could be left or right
    check(Cert,SL,unfk([A,B|Gamma])). 



isPositive(and(_,_)).
isPositive(x(_)). 

isNegative(not(x(_))).
isNegative(or(_,_)).

negate(x(P),not(x(P))).
negate(not(x(P)),x(P)).
negate(or(A,B), and(NA,NB)) :- negate(A,NA), negate(B,NB).  
negate(and(A,B), or(NA,NB)) :- negate(A,NA), negate(B,NB).
negate(true,false). 
negate(false,true).


%!!!end of checker code !!!


%Trace from file: getName.py
main :- check(certRight([99, 98, 95, 93, 89, 87, 86, 85, 82, 81, 77, 76, 75, 74, 73, 72, 71, 70, 69, 67, 66, 65, 64, 60, 59, 58, 56, 52, 49, 48, 47, 46, 44, 43, 42, 40, 39, 34, 28, 27, 26, 25, 24, 20, 18, 14, 13, 8, 5, 3, 1, 2], 
 chains([chain(100,[70,93,24,48,82,64,75,1,60,73,65,72,2],or(not(x(9)),x(1))),chain(101,[39,56,59,46,70],or(x(9),or(x(11),x(4)))),chain(102,[98,89,26,43,58,95,39],or(x(9),or(x(4),or(x(17),x(18))))),chain(103,[40,44,71,67,101,102,100,34],or(x(4),x(1))),chain(104,[93,3,74,39,69,49,99],or(x(9),or(not(x(4)),or(x(18),x(17))))),chain(105,[76,34,100,104,103,52],x(1)),chain(106,[8,105],or(not(x(15)),x(4))),chain(107,[20,105],or(x(8),x(15))),chain(108,[28,105],or(x(16),x(20))),chain(110,[42,105],or(not(x(4)),not(x(9)))),chain(111,[47,105],or(not(x(10)),not(x(18)))),chain(112,[66,105],or(not(x(5)),not(x(9)))),chain(115,[87,43,14,39,58,106],or(x(9),or(x(18),x(4)))),chain(116,[71,13],or(not(x(18)),or(x(19),x(15)))),chain(117,[85,72,14,86,5,77,106,25,70,81,116,107,115],or(x(9),x(4))),chain(118,[81,107,106,44,70,112,117,25,24],x(4)),chain(119,[110,118],not(x(9))),chain(122,[39,119],or(not(x(6)),x(18))),chain(124,[52,118],or(x(12),not(x(18)))),chain(127,[93,118],or(not(x(7)),not(x(16)))),chain(129,[3,122,108,99,127],x(18)),chain(130,[124,129],x(12)),chain(131,[111,129],not(x(10))),chain(132,[76,130,129],x(17)),chain(133,[56,131,129],not(x(15))),chain(134,[75,132,129],not(x(3))),chain(139,[18,134,133],x(5)),chain(141,[27,130,134,139],false)])),  store([],[]), 
  unfk([or(and(x(20),not(x(6))),or(and(not(x(7)),not(x(8))),or(and(x(3),not(x(6))),or(and(x(7),x(16)),or(and(x(7),x(13)),or(and(not(x(2)),not(x(19))),or(and(x(5),x(20)),or(and(x(14),not(x(13))),or(and(not(x(7)),x(3)),or(and(x(8),x(19)),or(and(not(x(2)),x(11)),or(and(not(x(17)),x(12)),or(and(x(3),x(17)),or(and(x(2),not(x(16))),or(and(not(x(3)),x(6)),or(and(not(x(14)),not(x(5))),or(and(not(x(19)),not(x(3))),or(and(not(x(11)),not(x(15))),or(and(not(x(2)),not(x(17))),or(and(x(19),x(18)),or(and(x(5),x(9)),or(and(x(14),not(x(6))),or(and(not(x(16)),x(17)),or(and(x(3),not(x(20))),or(and(not(x(11)),not(x(6))),or(and(not(x(18)),not(x(13))),or(and(x(15),not(x(10))),or(and(not(x(12)),x(18)),or(and(x(10),x(2)),or(and(x(15),x(17)),or(and(x(10),x(18)),or(and(x(10),not(x(11))),or(and(not(x(5)),x(11)),or(and(x(13),x(19)),or(and(x(4),x(9)),or(and(x(5),x(3)),or(and(not(x(18)),x(6)),or(and(x(17),not(x(9))),or(and(not(x(16)),not(x(20))),or(and(x(5),not(x(3))),or(and(x(8),not(x(17))),or(and(x(6),not(x(20))),or(and(x(20),x(9)),or(and(not(x(8)),not(x(15))),or(and(not(x(5)),not(x(3))),or(and(x(2),x(13)),or(and(x(3),not(x(15))),or(and(not(x(4)),x(15)),or(and(not(x(16)),x(6)),or(and(not(x(7)),x(16)),or(and(x(9),not(x(17))),and(x(5),x(9)))))))))))))))))))))))))))))))))))))))))))))))))))))])), print(1), nl ;  
 print(0),nl, fail. 
